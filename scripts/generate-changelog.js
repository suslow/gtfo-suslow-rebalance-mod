const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –±–ª–æ–∫–∞
function getBlockName(block) {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º name, –ø–æ—Ç–æ–º PublicName
    if (block.name) return block.name;
    if (block.PublicName) return block.PublicName;
    if (block.persistentID) return `Block_${block.persistentID}`;
    return 'Unknown Block';
}

// –°–ø–∏—Å–æ–∫ –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
const IMPORTANT_FIELDS = {
    'GameData_ArchetypeDataBlock_bin.json': [
        'Damage', 'DefaultClipSize', 'DefaultReloadTime', 'CostOfBullet', 'ShotDelay',
        'StaggerDamageMulti', 'PrecisionDamageMulti', 'DamageFalloff', 'FireMode',
        'BurstDelay', 'BurstShotCount', 'PiercingBullets', 'PiercingDamageCountLimit',
        'ShotgunBulletCount', 'ShotgunBulletSpread', 'HipFireSpread'
    ],
    'GameData_FlashlightSettingsDataBlock_bin.json': [
        'range', 'angle', 'intensity', 'color'
    ],
    'GameData_MeleeArchetypeDataBlock_bin.json': [
        'ChargedAttackDamage', 'LightAttackDamage', 'LightStaggerMulti', 'ChargedStaggerMulti',
        'ChargedAttackStaminaCost', 'LightAttackStaminaCost', 'PushStaminaCost'
    ]
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –≤–∞–∂–Ω–æ–µ –ª–∏ —ç—Ç–æ –ø–æ–ª–µ
function isImportantField(fileName, fieldPath) {
    const fields = IMPORTANT_FIELDS[fileName] || [];
    const fieldName = fieldPath.split('.').pop();
    
    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, DamageFalloff.x)
    const parentField = fieldPath.split('.').slice(-2, -1)[0];
    
    return fields.includes(fieldName) || fields.includes(parentField);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
function compareValues(oldVal, newVal, fieldPath, fileName) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∞–∂–Ω–æ–µ –ª–∏ —ç—Ç–æ –ø–æ–ª–µ
    if (!isImportantField(fileName, fieldPath)) {
        return null;
    }
    
    // –î–ª—è —á–∏—Å–µ–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é
    if (typeof oldVal === 'number' && typeof newVal === 'number') {
        if (Math.abs(oldVal - newVal) < 0.001) return null; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º–∏–∫—Ä–æ–∏–∑–º–µ–Ω–µ–Ω–∏—è
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –∫—Ä–∞—Å–∏–≤–æ
        const oldFormatted = oldVal % 1 === 0 ? oldVal.toString() : oldVal.toFixed(3).replace(/\.?0+$/, '');
        const newFormatted = newVal % 1 === 0 ? newVal.toString() : newVal.toFixed(3).replace(/\.?0+$/, '');
        
        return {
            oldValue: oldVal,
            newValue: newVal,
            formatted: `${oldFormatted} ‚Üí ${newFormatted}`
        };
    }
    
    // –î–ª—è —Å—Ç—Ä–æ–∫ –∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤
    if (oldVal !== newVal) {
        return {
            oldValue: oldVal,
            newValue: newVal,
            formatted: `${oldVal} ‚Üí ${newVal}`
        };
    }
    
    return null;
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
function compareObjects(oldObj, newObj, path = '', changes = [], fileName = '') {
    for (const key in newObj) {
        const currentPath = path ? `${path}.${key}` : key;
        const oldValue = oldObj[key];
        const newValue = newObj[key];
        
        if (!(key in oldObj)) {
            // –ù–æ–≤–æ–µ –ø–æ–ª–µ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∞–∂–Ω–æ–µ
            if (isImportantField(fileName, currentPath) && (typeof newValue !== 'object' || newValue === null)) {
                changes.push({
                    path: currentPath,
                    type: 'added',
                    property: key,
                    newValue: newValue
                });
            }
        } else if (typeof newValue === 'object' && newValue !== null && !Array.isArray(newValue)) {
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
            compareObjects(oldValue, newValue, currentPath, changes, fileName);
        } else {
            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä–∏–º–∏—Ç–∏–≤—ã
            const change = compareValues(oldValue, newValue, currentPath, fileName);
            if (change) {
                changes.push({
                    path: currentPath,
                    type: 'changed',
                    property: key,
                    ...change
                });
            }
        }
    }
    
    return changes;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–ª–æ–∫–æ–≤
function analyzeBlocks(oldBlocks, newBlocks, fileName) {
    const changes = [];
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –±–ª–æ–∫–æ–≤ –ø–æ persistentID
    const oldMap = {};
    const newMap = {};
    
    if (oldBlocks) {
        oldBlocks.forEach(block => {
            if (block.persistentID) {
                oldMap[block.persistentID] = block;
            }
        });
    }
    
    if (newBlocks) {
        newBlocks.forEach(block => {
            if (block.persistentID) {
                newMap[block.persistentID] = block;
            }
        });
    }
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –±–ª–æ–∫–∏
    Object.keys(newMap).forEach(id => {
        const oldBlock = oldMap[id];
        const newBlock = newMap[id];
        
        if (oldBlock) {
            const blockName = getBlockName(newBlock);
            const blockChanges = compareObjects(oldBlock, newBlock, '', [], fileName);
            
            if (blockChanges.length > 0) {
                changes.push({
                    blockName: blockName,
                    blockId: id,
                    changes: blockChanges
                });
            }
        }
    });
    
    return changes;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è changelog
function formatChangelog(blockChanges, fileName) {
    if (blockChanges.length === 0) return '';
    
    const fileDisplayName = fileName
        .replace('GameData_', '')
        .replace('_bin.json', '')
        .replace('ArchetypeDataBlock', 'Weapons')
        .replace('FlashlightSettingsDataBlock', 'Flashlights')
        .replace('MeleeArchetypeDataBlock', 'Melee Weapons');
        
    let output = `\n## ${fileDisplayName}\n\n`;
    
    blockChanges.forEach(block => {
        output += `### ${block.blockName}\n\n`;
        
        block.changes.forEach(change => {
            const propertyName = change.property || change.path.split('.').pop();
            
            if (change.type === 'changed') {
                output += `- **${propertyName}**: ${change.formatted}\n`;
            } else if (change.type === 'added') {
                output += `- **${propertyName}**: Added (${change.newValue})\n`;
            }
        });
        
        output += '\n';
    });
    
    return output;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ changelog
function generateChangelog() {
    const previousDir = 'previous'; // –í–º–µ—Å—Ç–æ vanilla - –ø—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è
    const currentDir = 'BepInEx/plugins/suslow_rebalance_mod';
    
    if (!fs.existsSync(previousDir)) {
        console.log('‚ùå –ü–∞–ø–∫–∞ previous/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        console.log('üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É previous/ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç—É–¥–∞ —Ñ–∞–π–ª—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏.');
        console.log('üí° –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å —Ñ–ª–∞–≥–æ–º --init –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:');
        console.log('   node scripts/generate-changelog.js --init');
        return;
    }
    
    let fullChangelog = `# Changelog\n\n*Changes since previous version - ${new Date().toISOString().split('T')[0]}*\n\n`;
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ JSON —Ñ–∞–π–ª–æ–≤
    const jsonFiles = fs.readdirSync(currentDir).filter(file => file.endsWith('.json'));
    let totalChanges = 0;
    
    jsonFiles.forEach(fileName => {
        const previousPath = path.join(previousDir, fileName);
        const currentPath = path.join(currentDir, fileName);
        
        if (fs.existsSync(previousPath)) {
            try {
                const previousData = JSON.parse(fs.readFileSync(previousPath, 'utf8'));
                const currentData = JSON.parse(fs.readFileSync(currentPath, 'utf8'));
                
                const blockChanges = analyzeBlocks(previousData.Blocks, currentData.Blocks, fileName);
                const formattedChanges = formatChangelog(blockChanges, fileName);
                
                if (formattedChanges) {
                    fullChangelog += formattedChanges;
                    totalChanges += blockChanges.reduce((sum, block) => sum + block.changes.length, 0);
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${fileName}:`, error.message);
            }
        } else {
            console.log(`‚ö†Ô∏è  –ü—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${previousPath}`);
        }
    });
    
    if (totalChanges === 0) {
        fullChangelog += '\n*No significant changes detected.*\n';
        console.log('‚ÑπÔ∏è  –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.');
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –Ω–∞—á–∞–ª–æ
        const statsLine = `**Total changes: ${totalChanges}**\n\n---\n\n`;
        fullChangelog = fullChangelog.replace('*Changes since', statsLine + '*Changes since');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º changelog
    fs.writeFileSync('CHANGELOG.md', fullChangelog);
    console.log(`‚úÖ Changelog —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: CHANGELOG.md`);
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${totalChanges}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (totalChanges > 0) {
        console.log('\nüìã –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π:');
        const lines = fullChangelog.split('\n');
        lines.forEach(line => {
            if (line.startsWith('### ') || line.startsWith('- **')) {
                console.log(line);
            }
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - –∫–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã –≤ previous
function initPrevious() {
    const currentDir = 'BepInEx/plugins/suslow_rebalance_mod';
    const previousDir = 'previous';
    
    if (!fs.existsSync(previousDir)) {
        fs.mkdirSync(previousDir, { recursive: true });
    }
    
    const jsonFiles = fs.readdirSync(currentDir).filter(file => file.endsWith('.json'));
    
    jsonFiles.forEach(fileName => {
        const sourcePath = path.join(currentDir, fileName);
        const destPath = path.join(previousDir, fileName);
        fs.copyFileSync(sourcePath, destPath);
        console.log(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${fileName}`);
    });
    
    console.log(`\n‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–∞–ø–∫–∞ previous/ —Å–æ–∑–¥–∞–Ω–∞.`);
    console.log(`üí° –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∑–∞–ø—É—Å–∫–∞–π—Ç–µ: node scripts/generate-changelog.js`);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if (process.argv.includes('--init')) {
    initPrevious();
} else {
    generateChangelog();
}